Use of native JavaScript modules is dependent on the import and export statements.

Introducing an example that demonstrate a simple set of modules that create a <canvas> elemnte on a webpage, and then draw
different shapes on the canvas.

Basic example structure:

canva.js- contains functions related to setting up the canvas:
  -create()- creates a canva with a specified width and height inside a wrapper <div> with a specified ID, which is itself 
  appended inside a specified parent element. 
  -createReportList()- creates an unordered list appended inside a specified wrapper element, wich can be used to output report data into.
 square.js- contains:
  - name- a constant containing the string 'square'.
  -draw()- draws a square on a specified canvas, with a specified sixe, position and color.
  -reportArea()- writes a square's area to a specific report list, given its length.
  reportPerimeter()- writes a square's peimeter to a specific report list, given its length.
  
  
  EXPORITNG MODULE FEATURES
  
  First thing you do to access to module features is export them using the export statement.
  
  export const name= 'quare';
  
  export function draw(ctx, length, x, y, color){
     ctx.fillStyle = color;
     ctz.fillRect(x,y, length, length);
     
     return { length, x, y, color};
     }
     
     *You can't use export inside a function.
     
     A more convenient way of exporting all the items you want to export is to use a single export
     statement at the end of your module file, followed by a comma-separated list of the features you
     want to export wrapped in curly braces:
     
     export { name, draw, reportArea, reportPerimeter };
     
     
